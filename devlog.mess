## NAME CONFLICT

### create packages in both envs first

Add a generic to the protocol to create the packages in both the compilation and load
envinronments before we produce as schema. Downsides are that this requires you to read
the schema twice.

### start at the root and go down

create the parents first and import their symbols in both envs before
we do any work on generating slots, i mean this is how it should be anyways right?

This is how it should be anyways.

But is it sane to have pakcages for each schema to begin with?

Well not really because we'd be comparing properties with #'string-equal
to see if they'd already appeared in the heirarchy, it would just be better
to keep everything in a heriarchy in the same package.


# 2019-12-22

ok so there's this issue where if you inherit a schema you get something like
((my-inherited-schema:foo)
 (my-actual-schema:bar))

which is bad when we want the postmodern backend to have `:keys`
This is also potentially desirable behavoir

both can be resolved with some kind of extensible object which abstracts
a slot option, but i feel like we're adding too much shit if we do that.
might be worth it though.

No that's not a good idea, slot options might be but i think you just need
to ensure that the symbol is also imported and exported in the current package
by resolve-referrences.

The way i solved this for now is just adding a find-ids to the postgres option
at the minute it's going to return all ids and i'm stopping now and setting up
the gitlab ci to use postgres so i can make sure i'm not gonna slip on testing.

also rename the find-ids to find-keys. It's confusing otherwise.

### multiple inheritance problem

We basically have a problem where some properties are given twice because they either
add more information to the validation schema or they just are lazy and included it in
again.

There should be a better way to solve this than using precedence since if they
are simply expanding on the definition, then you're kind of in for trouble
when you are not inheriting the option but simply merging the option.

Maybe there does need to be some kind of merge mechanism but that's kind of complicated
and it would be easier to just edit the schemas.

This really can't be solved until validation is taken care of.

Like, things aren't really a slot until they get to their defacto class and that
information can be overwritten, so i guess we can use the slot option plist
and compare slotnames with :test #'string= :key #'symbol-name? actually don't need that
string-equal is a thing btw. In this case you would only add if it isn't there
since the most recent version is the furthest from the root 



We also need to fix m.room -> m-room becauise that's annoying

## nested properties problem

### solution 1

have the slot names go like content-session-id so that content is prefixed to the front

no that's terrible please don't do that

### solution 2

have a typed schema, that inherits one schema directly and asserts that the type field is correct if given.

Then there will be a 'content' or 'nested' properties schema associated with the typed schema
which will be a bound json-serializable in the content slot

when the dao is saved, you can either chose to do some bs relational mapping
or just serialize the slot to json string for the database.

#### problems
what about nested nested properties?? Well we just do the same thing.

This probably requires at least one new metaclass

So i guess what we do is make a class called (schema-name)-(property-name)
for a prperty with something in it and carry on as normal.


# ideasd

ok so we're gonna have json readers, serializers and also an object store backend

the json reader and writer you use will have to be configurable and i guess there's two
ways of doing this, we either generate the store, serialize and read methods for each
class or we use a metaclass or something like that to do somze wizard shjit who cares.

## meta object

we might want to keep the key in the slot class so that we know what to serialize a slot too.

although we might not need to if we just add a method for each one or whatever.


(defclass foo ()
  ((foo :initarg :foo
  

## could use method hooks

use method hooks to do things like add a storage backend if we just are not using meta objects

metaclass will be needed if you want to save heap space on functions
so we might need a way of extending what we can store in the class about slots etc.

## we're gonn have issues

meta object would be better than having generics witwh 1000 generated methods for some objects.

## tests

test fucking everything.

## a slot is named something like type and you're fucked

we need to watch when intern returns other than :inherited http://clhs.lisp.se/Body/f_find_s.htm

when it does we can append the schema name on the front. Another alternative is not
importing the whole of cl, but i don't think that's as good of an idea.
